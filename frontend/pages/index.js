import React, { useState, useCallback, useEffect } from 'react';
import useWebSocket, { ReadyState } from 'react-use-websocket';
import Head from 'next/head';
import styles from '../styles/Home.module.css';

const Home = () => {
  // Websocket Endpoint
  const socketUrl = 'ws://localhost:8080/';
  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl, {
    onOpen: () => {
      // do something when Websocket Connected!
    },
    shouldReconnect: (closeEvent) => true,
    reconnectAttempts: 10000,
    reconnectInterval: 3000, // 3 second
  });

  // ****** States *******
  // Message Structure from Backend - Info received from backend
  const [status, setStatus] = useState([]);
  const [params, setParams] = useState([]);
  const [response, setResponse] = useState({});
  const [loggingInfo, setLoggingInfo] = useState('');
  const [loggingWarning, setLoggingWarning] = useState('');
  const [loggingError, setLoggingError] = useState('');
  // Command to be sent to backend
  const [request, setRequest] = useState({});

  const connectionStatus = {
    [ReadyState.CONNECTING]: 'Connecting',
    [ReadyState.OPEN]: 'Open',
    [ReadyState.CLOSING]: 'Closing',
    [ReadyState.CLOSED]: 'Closed',
    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',
  }[readyState];

  // ****** Functions *******
  const publishMessage = (content) => {
    // Publish Message to Backend via Websocket - Low-level function
    const message = {
      n: 'CommandExchange',
      d: {
        t: 'backend',
        m: {
          ...content,
        },
        ts: Math.floor(Date.now() / 1000),
      },
    };
    sendMessage(JSON.stringify(message));
  };

  useEffect(() => {
    // Deal with the message from backend.
    if (lastMessage !== null) {
      const data = JSON.parse(lastMessage.data);
      const target = data.d.t;
      if (target !== 'frontend') return; // Not the message to frontend.
      const currTimestamp = Math.floor(Date.now() / 1000);
      const receivedTimestamp = data.d.ts;
      if (currTimestamp - receivedTimestamp > 5) {
        console.warn(
          'Msg Received From Backend is outside the Recv Window, ABANDON the data!'
        );
        return;
      }
      const message = data.d.m;
      const msgProperties = Object.getOwnPropertyNames(message);
      if (msgProperties.includes('status')) {
        setStatus(message.status);
      }
      if (msgProperties.includes('params')) {
        setParams(message.params);
      }
      if (msgProperties.includes('response')) {
        setResponse(message.response);
      }
      if (msgProperties.includes('loggingInfo')) {
        setLoggingInfo(message.loggingInfo);
      }
      if (msgProperties.includes('loggingWarning')) {
        setLoggingWarning(message.loggingWarning);
      }
      if (msgProperties.includes('loggingError')) {
        setLoggingError(message.loggingError);
      }
    }
  }, [lastMessage]);

  useEffect(() => {
    // do sth with status
    console.log("update on status.")
    console.log(status)
    console.log("~~~")
  }, [status]);

  useEffect(() => {
    // do sth with params
  }, [params]);

  useEffect(() => {
    // do sth with response
  }, [response]);

  useEffect(() => {
    // do sth with loggingInfo
  }, [loggingInfo]);

  useEffect(() => {
    // do sth with loggingInfo
  }, [loggingInfo]);

  useEffect(() => {
    // do sth with loggingInfo
  }, [loggingInfo]);

  useEffect(() => {
    // sent msg to backend for test.
    setInterval(() => {
      publishMessage({ hello: 'world' });
    }, 3000);
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <span>The WebSocket is currently {connectionStatus}</span>

          <p>{JSON.stringify(status)}</p>
          <br />
          <br />
          {/* {lastMessage && <p>{lastMessage.data}</p>} */}
        </div>
      </main>
    </div>
  );
};

export default Home;
